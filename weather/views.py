from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import WeatherData, WeatherAlert
from .serializers import WeatherDataSerializer, WeatherAlertSerializer
from .services import OpenWeatherService

class PortWeatherView(APIView):
    """Ø¬Ù„Ø¨ Ø¨ÙŠØ§Ù†Ø§Øª Ø§Ù„Ø·Ù‚Ø³ Ù„Ù…ÙŠÙ†Ø§Ø¡ Ù…Ø¹ÙŠÙ†"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request, port_id):
        from ships.models import Port
        
        try:
            port = Port.objects.get(id=port_id)
            service = OpenWeatherService()
            weather_data = service.get_port_weather(port)
            
            if weather_data:
                return Response(weather_data)
            else:
                return Response(
                    {"error": "Unable to fetch weather data"}, 
                    status=404
                )
                
        except Port.DoesNotExist:
            return Response({"error": "Port not found"}, status=404)
# ðŸ†• NOUVELLE VIEW: MÃ©tÃ©o du navire
class ShipWeatherView(APIView):
    """
    get:
    Obtenir la mÃ©tÃ©o actuelle Ã  la position d'un navire
    
    Retourne les conditions mÃ©tÃ©orologiques exactes Ã  l'emplacement actuel du navire
    avec tempÃ©rature, vent, visibilitÃ© et alertes potentielles.
    """
    permission_classes = [IsAuthenticated]
    
    def get(self, request, ship_id):
        from ships.models import Ship
        from notifications.services import NotificationService  # ðŸ†• IMPORT
        
        try:
            ship = Ship.objects.get(id=ship_id)
            
            # VÃ©rifier que l'utilisateur suit ce navire ou est admin
            if not (request.user.is_staff or ship.is_tracked_by_user(request.user)):
                return Response(
                    {"error": "Vous ne suivez pas ce navire"}, 
                    status=403
                )
            
            service = OpenWeatherService()
            
            if ship.current_latitude and ship.current_longitude:
                weather_data = service.get_weather_by_coordinates(
                    ship.current_latitude, 
                    ship.current_longitude, 
                    ship=ship
                )
                
                if weather_data:
                    # ðŸ†• INTÃ‰GRATION NOTIFICATIONS - Alertes automatiques
                    notification_service = NotificationService()
                    weather_issues = []
                    
                    if weather_data.get('wind_speed', 0) > 15:
                        weather_issues.append(f"Vents forts: {weather_data['wind_speed']} m/s")
                    
                    if weather_data.get('visibility', 10000) < 2000:
                        weather_issues.append(f"Brouillard: visibilitÃ© {weather_data['visibility']}m")
                    
                    if weather_issues:
                        notification_service.send_route_weather_alert(ship, weather_issues)
                    
                    return Response(weather_data)
                else:
                    return Response(
                        {"error": "Impossible de rÃ©cupÃ©rer les donnÃ©es mÃ©tÃ©o"}, 
                        status=404
                    )
            else:
                return Response(
                    {"error": "Position du navire non disponible"}, 
                    status=404
                )
                
        except Ship.DoesNotExist:
            return Response({"error": "Navire non trouvÃ©"}, status=404)

# ðŸ†• NOUVELLE VIEW: Analyse mÃ©tÃ©o du parcours
class ShipRouteWeatherView(APIView):
    """
    get:
    Analyser la mÃ©tÃ©o sur le parcours complet d'un navire
    
    Ã‰value les conditions mÃ©tÃ©orologiques sur l'ensemble du trajet
    entre la position actuelle et le port de destination.
    Retourne les problÃ¨mes potentiels et l'impact sur le temps de voyage.
    """
    permission_classes = [IsAuthenticated]
    
    def get(self, request, ship_id):
        from ships.models import Ship
        
        try:
            ship = Ship.objects.get(id=ship_id)
            
            # VÃ©rifier que l'utilisateur suit ce navire ou est admin
            if not (request.user.is_staff or ship.is_tracked_by_user(request.user)):
                return Response(
                    {"error": "Vous ne suivez pas ce navire"}, 
                    status=403
                )
            
            if not (ship.current_latitude and ship.current_longitude and ship.destination_port):
                return Response(
                    {"error": "DonnÃ©es de parcours incomplÃ¨tes"}, 
                    status=400
                )
            
            service = OpenWeatherService()
            
            route_analysis = service.get_route_weather_analysis(
                start_lat=ship.current_latitude,
                start_lon=ship.current_longitude,
                end_lat=ship.destination_port.latitude,
                end_lon=ship.destination_port.longitude
            )
            
            if route_analysis:
                # ðŸ†• Les notifications sont dÃ©jÃ  gÃ©rÃ©es dans get_route_weather_analysis
                return Response(route_analysis)
            else:
                return Response(
                    {"error": "Impossible d'analyser la mÃ©tÃ©o du parcours"}, 
                    status=404
                )
                
        except Ship.DoesNotExist:
            return Response({"error": "Navire non trouvÃ©"}, status=404)

# ðŸ†• NOUVELLE VIEW: Alertes mÃ©tÃ©o pour un navire
class ShipWeatherAlertsView(APIView):
    """
    get:
    Obtenir les alertes mÃ©tÃ©o actives pour un navire
    
    Retourne les alertes mÃ©tÃ©orologiques spÃ©cifiques Ã  la zone
    oÃ¹ se trouve le navire et sur son parcours.
    """
    permission_classes = [IsAuthenticated]
    
    def get(self, request, ship_id):
        from ships.models import Ship
        
        try:
            ship = Ship.objects.get(id=ship_id)
            
            # VÃ©rifier que l'utilisateur suit ce navire ou est admin
            if not (request.user.is_staff or ship.is_tracked_by_user(request.user)):
                return Response(
                    {"error": "Vous ne suivez pas ce navire"}, 
                    status=403
                )
            
            # RÃ©cupÃ©rer les donnÃ©es mÃ©tÃ©o rÃ©centes pour ce navire
            recent_weather = WeatherData.objects.filter(
                ship=ship
            ).order_by('-recorded_at').first()
            
            alerts = []
            
            if recent_weather:
                # VÃ©rifier les conditions pour des alertes
                if recent_weather.wind_speed > 15:
                    alerts.append({
                        'type': 'high_wind',
                        'severity': 'high',
                        'message': f'Vents forts: {recent_weather.wind_speed} m/s',
                        'ship_position': f"{ship.current_latitude}, {ship.current_longitude}"
                    })
                
                if recent_weather.visibility < 2000:
                    alerts.append({
                        'type': 'fog', 
                        'severity': 'medium',
                        'message': f'Brouillard - VisibilitÃ©: {recent_weather.visibility}m',
                        'ship_position': f"{ship.current_latitude}, {ship.current_longitude}"
                    })
            
            return Response({
                'ship_id': ship.id,
                'ship_name': ship.name,
                'current_position': f"{ship.current_latitude}, {ship.current_longitude}",
                'active_alerts': alerts,
                'alert_count': len(alerts)
            })
                
        except Ship.DoesNotExist:
            return Response({"error": "Navire non trouvÃ©"}, status=404)
class UpdateAllWeatherView(APIView):
    """ØªØ­Ø¯ÙŠØ« Ø·Ù‚Ø³ Ø¬Ù…ÙŠØ¹ Ø§Ù„Ù…ÙˆØ§Ù†Ø¦"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        if not request.user.is_staff:
            return Response({"error": "Permission denied"}, status=403)
        
        service = OpenWeatherService()
        result = service.update_all_ports_weather()
        
        return Response({"message": result})

class WeatherAlertsView(APIView):
    """Ø¬Ù„Ø¨ Ø¥Ù†Ø°Ø§Ø±Ø§Øª Ø§Ù„Ø·Ù‚Ø³ Ø§Ù„Ù†Ø´Ø·Ø©"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request):
        alerts = WeatherAlert.objects.filter(is_active=True)
        serializer = WeatherAlertSerializer(alerts, many=True)
        return Response(serializer.data)

class PortWeatherHistoryView(APIView):
    """Ø³Ø¬Ù„ Ø§Ù„Ø·Ù‚Ø³ Ù„Ù…ÙŠÙ†Ø§Ø¡ Ù…Ø¹ÙŠÙ†"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request, port_id):
        weather_history = WeatherData.objects.filter(port_id=port_id).order_by('-recorded_at')[:10]
        serializer = WeatherDataSerializer(weather_history, many=True)
        return Response(serializer.data)